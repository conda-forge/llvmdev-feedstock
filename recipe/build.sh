#!/bin/bash

set -exuo pipefail

export CXXFLAGS="${CXXFLAGS} -std=c++17"

if [[ "${target_platform}" == osx-* ]]; then
  export LDFLAGS="${LDFLAGS} -lz -framework CoreFoundation -Xlinker -undefined -Xlinker dynamic_lookup"
else
  export LDFLAGS="${LDFLAGS} -lrt"
fi

pushd utils/bazel
source gen-bazel-toolchain
bazel build \
    --repo_env=BAZEL_LLVM_ZLIB_STRATEGY=system \
    --@llvm-project//libc:mpfr=disable \
    --@llvm-project//llvm:pfm=disable \
    --crosstool_top=//bazel_toolchain:toolchain \
    --cpu ${TARGET_CPU} \
    @llvm-project//llvm/... @llvm-project//mlir/...
popd

mkdir -p ${PREFIX}/share/llvm_for_tf
# Copy headers and other sources to be re-used in the downstream project.
cp -ap llvm mlir utils ${PREFIX}/share/llvm_for_tf/
cp utils/bazel/bazel-bazel/external/llvm-project/vars.bzl ${PREFIX}/share/llvm_for_tf/

# Remove bazel-build artifacts
rm -rf ${PREFIX}/share/llvm_for_tf/utils/bazel/bazel-*
rsync -a utils/bazel/llvm-project-overlay/ ${PREFIX}/share/llvm_for_tf/
# These files will be generated by the Python script below, ensure that we
# don't accidentially keep the original.
rm ${PREFIX}/share/llvm_for_tf/llvm/BUILD.bazel
rm ${PREFIX}/share/llvm_for_tf/mlir/BUILD.bazel

# Delete some files that break LIEF (and aren't needed)
rm -rf ${PREFIX}/share/llvm_for_tf/clang/test/
rm -rf ${PREFIX}/share/llvm_for_tf/llvm/test/
rm -rf ${PREFIX}/share/llvm_for_tf/llvm/utils/lit/tests
find ${PREFIX}/share/llvm_for_tf -name '*.a' -delete
find ${PREFIX}/share/llvm_for_tf -name '*.exe' -delete
find ${PREFIX}/share/llvm_for_tf -name '*.dll' -delete
find ${PREFIX}/share/llvm_for_tf -name '*.o' -delete

mkdir -p ${PREFIX}/lib/llvm_for_tf
# Copy over the static libraries and generate bazel BUILD files that reference them.
python $RECIPE_DIR/compile_bundle.py
